Description: Pipeline for base-images
Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      ManagedPolicyArns:
        - !ImportValue core-infrastructure-global-codebuild-base-policy-arn
        - !ImportValue core-infrastructure-global-packer-policy-arn
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
        Location: !ImportValue core-infrastructure-eu-west-1-build-artifacts-bucket
        Path: /artifacts/base-images/
        Packaging: NONE
        Name: build
        NamespaceType: BUILD_ID
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Name: base-images
      TimeoutInMinutes: 20
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !ImportValue core-infrastructure-eu-west-1-build-artifacts-bucket
      Name: base-images
      RestartExecutionOnUpdate: true
      RoleArn: !ImportValue core-infrastructure-global-codepipeline-base-role-arn
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              OutputArtifacts:
                - Name: GitHubSource
              RunOrder: 1
              Name: Clone-From-GitHub
              Namespace: SourceVariables
              Configuration:
                Owner: AlexChesters
                Repo: base-images
                Branch: master
                OAuthToken: "{{resolve:ssm:/Secrets/GitHub-Token:1}}"
                PollForSourceChanges: false
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: GitHubSource
              RunOrder: 1
              Name: Docker
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: '[{"name":"IMAGE","value":"docker"}]'
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: GitHubSource
              RunOrder: 1
              Name: NGINX
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: '[{"name":"IMAGE","value":"nginx"}]'
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: GitHubSource
              RunOrder: 1
              Name: NodeJS
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: '[{"name":"IMAGE","value":"nodejs"}]'

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:ssm:/Secrets/GitHub-Webhook-Secret:1}}"
      Filters:
        - JsonPath: "$.ref"
      TargetPipeline: !Ref CodePipeline
      TargetAction: Clone-From-GitHub
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
